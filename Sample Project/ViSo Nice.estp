{"BuildOptions":[{"OptionModelName":"Data Context","OutputFileName":"[[CanvasName]].cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData\\DataContext","RepeatOption":0,"OverrideIfExists":true,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Data Context","RepeatType":0,"Code":"using System.Data.Entity;\r\nusing System.Data.Entity.ModelConfiguration.Conventions;\r\nusing ViSo.EFData.Mappings;\r\nusing ViSo.SharedModels.DataModels;\r\n\r\nnamespace ViSo.EFData.DataContext\r\n{\r\n    public class [[CanvasName]] : DbContext\r\n    {\r\n[[1]]\r\n[[2]]\r\n[[3]]\r\n    } \r\n}","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":1,"BuildTypeName":"DB Set Properties","RepeatType":1,"Code":"        public DbSet<[[TableName]]> [[TableName]] { get; set; }\r\n","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":2,"BuildTypeName":"Constructor","RepeatType":0,"Code":"        public [[CanvasName]]() : base(DataSettings.Setup.ConnectionString)\r\n        {\r\n        }\r\n","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":3,"BuildTypeName":"Override Model Create ","RepeatType":0,"Code":"        protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n             modelBuilder.Conventions.Remove<DecimalPropertyConvention>();\r\n             modelBuilder.Conventions.Add(new DecimalPropertyConvention(18, 6));\r\n\r\n[[4]]\r\n        }","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":4,"BuildTypeName":"Model Create Mapping","RepeatType":1,"Code":"             modelBuilder.Configurations.Add(new [[TableName]]Mapping());\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Mapping Files","OutputFileName":"[[TableName]]Mapping.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData\\Mappings","RepeatOption":1,"OverrideIfExists":true,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System.Data.Entity.ModelConfiguration;\r\nusing ViSo.SharedModels.DataModels;\r\n\r\nnamespace ViSo.EFData.Mappings\r\n{\r\n    public class [[TableName]]Mapping : EntityTypeConfiguration<[[TableName]]>\r\n    {\r\n        public [[TableName]]Mapping()\r\n        {\r\n             ToTable(\"[[TableName]]\");\r\n\r\n             HasKey(k => new {  [[1]]  });\r\n\r\n[[2]]\r\n        }\r\n    }\r\n}","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":1,"BuildTypeName":"Primary Key Mapping","RepeatType":3,"Code":"k.[[PrimaryKey]][[?,]] ","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":2,"BuildTypeName":"Column Mapping","RepeatType":2,"Code":"            Property(col[[ColumnName]] =>  col[[ColumnName]].[[ColumnName]]).HasColumnName(\"[[ColumnName]]\");\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Repository Base","OutputFileName":"[[CanvasName]]Repository_Base.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData\\Repositories\\Base","RepeatOption":0,"OverrideIfExists":true,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing ViSo.EFData.DataContext;\r\nusing ViSo.SharedModels.DataModels;\r\n\r\nnamespace ViSo.EFData.Repositories\r\n{\r\n    public abstract class [[CanvasName]]Repository_Base\r\n    {\r\n        public [[CanvasName]] dataContext;\r\n    \r\n        public [[CanvasName]]Repository_Base()\r\n        {\r\n            this.dataContext = new [[CanvasName]]();\r\n        }\r\n[[1]]    \r\n\r\n[[4]]\r\n    }\r\n}","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":1,"BuildTypeName":"Get by Primary key","RepeatType":1,"Code":"        \r\n        public [[TableName]] Get[[TableName]]([[2]])\r\n        {\r\n            return this.dataContext.[[TableName]].FirstOrDefault(pk => [[3]]);\r\n        }\r\n","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":2,"BuildTypeName":"Primary key Parameters","RepeatType":3,"Code":"[[DataType]] _[[PrimaryKey]][[?,]] ","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":3,"BuildTypeName":"Select Query","RepeatType":3,"Code":"pk.[[PrimaryKey]] == _[[PrimaryKey]] [[?&&]] ","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":4,"BuildTypeName":"Get by Foreign Key","RepeatType":4,"Code":"        public List<[[TableName]]> Get[[TableName]]By[[ForeignKey]]([[DataType]] _[[ForeignKey]])\r\n        {\r\n          return this.dataContext.[[TableName]]\r\n            .Where(x => x.[[ForeignKey]] == _[[ForeignKey]])\r\n            .ToList();\r\n        }\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Repositories","OutputFileName":"[[CanvasName]]Repository.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData\\Repositories\\User","RepeatOption":0,"OverrideIfExists":false,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using GeneralExtensions;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing ViSo.Common;\r\nusing ViSo.SharedEnums;\r\nusing ViSo.SharedModels.DataModels;\r\nusing WPF.Tools.ToolModels;\r\n\r\nnamespace ViSo.EFData.Repositories\r\n{\r\n  public class [[CanvasName]]Repository : [[CanvasName]]Repository_Base\r\n  {\r\n    public [[CanvasName]]Repository()\r\n    {\r\n    }\r\n\r\n    // TODO: Add your code Here\r\n\r\n  }\r\n}","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Models Base","OutputFileName":"[[TableName]]_Base.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-Shared\\ViSo.SharedModels\\DataModels\\Base","RepeatOption":1,"OverrideIfExists":true,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System;\r\nusing WPF.Tools.BaseClasses;\r\n\r\nnamespace ViSo.SharedModels.DataModels\r\n{\r\n    public abstract class [[TableName]]_Base : ModelsBase\r\n    {\r\n[[1]]\r\n[[2]]\r\n    }\r\n}","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":1,"BuildTypeName":"Field Items","RepeatType":2,"Code":"        private [[DataType]] _[[ColumnName]];\r\n","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":2,"BuildTypeName":"Properties","RepeatType":2,"Code":"        /// <summary>\r\n        /// <para>[[ColumnFriendlyName]] </para>\r\n        /// <para>[[ColumnDescription]] </para>\r\n        /// </summary>\r\n        public [[DataType]] [[ColumnName]]\r\n        { \r\n            get\r\n            {\r\n                return this._[[ColumnName]];\r\n            }\r\n\r\n             set\r\n             {\r\n                 base.OnPropertyChanged(\"[[ColumnName]]\", ref this._[[ColumnName]], value);\r\n             }\r\n        }\r\n\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Models","OutputFileName":"[[TableName]].cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-Shared\\ViSo.SharedModels\\DataModels\\User","RepeatOption":1,"OverrideIfExists":false,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System.ComponentModel.DataAnnotations.Schema;\r\n\r\nnamespace ViSo.SharedModels.DataModels\r\n{\r\n  public class [[TableName]] : [[TableName]]_Base\r\n  {\r\n    // NOTE: Add the [NotMapped] Attribute to all properties in this class to ensure that Entity Framework does not fall over\r\n  }\r\n}","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"DataBase","OutputFileName":"Database.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData","RepeatOption":2,"OverrideIfExists":false,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System.IO;\r\nusing ViSo.EFData.Repositories;\r\nusing ViSo.SharedModels.DataModels;\r\nusing WebHost.Common;\r\n\r\nnamespace ViSo.EFData\r\n{\r\n  public class Database\r\n  {\r\n    /// <summary>\r\n    /// Check if a Data Settings file exist for the database\r\n    /// </summary>\r\n    /// <returns>Returns a bool value (True if Exist)</returns>\r\n    public bool HasSetup()\r\n    {\r\n      return File.Exists(Path.Combine(Paths.StartupPath, \"DataSettings.xml\"));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Test the SQL Server Connection\r\n    /// </summary>\r\n    /// <returns>\r\n    /// <para>Returns True if connection was made</para>\r\n    /// <para>Throws the SQL Server error if connection failed</para>\r\n    /// </returns>\r\n    public bool TestConnextion()\r\n    {\r\n      ControlTablesRepository repository = new ControlTablesRepository();\r\n\r\n      return repository.GetAllCtl_CompanyControl().Count > -1;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Returns the SQL Data Settings Values\r\n    /// </summary>\r\n    /// <returns>Returns a SQLValues Model</returns>\r\n    public SQLValues GetSQLConnection()\r\n    {\r\n      if (this.HasSetup())\r\n      {\r\n        return DataSettings.Setup.SQLValues;\r\n      }\r\n\r\n      return new SQLValues();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Saves the SQL Model Values\r\n    /// </summary>\r\n    /// <param name=\"sql\">A SQLValues Model Object</param>\r\n    public void SaveSqlValues(SQLValues sql)\r\n    {\r\n      DataSettings.Setup.SQLValues = sql;\r\n\r\n      DataSettings.Setup.Save();\r\n    }\r\n  }\r\n}","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"DataSettings","OutputFileName":"DataSettings.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Controllers\\ViSo.EFData","RepeatOption":2,"OverrideIfExists":false,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using GeneralExtensions;\r\nusing System;\r\nusing System.IO;\r\nusing System.Xml.Serialization;\r\nusing ViSo.SharedModels.DataModels;\r\nusing WebHost.Common;\r\n\r\nnamespace ViSo.EFData\r\n{\r\n\r\n  [Serializable]\r\n  public class DataSettings\r\n  {\r\n    private bool useCriptor = false;\r\n\r\n    private static readonly string FilePath = Path.Combine(Paths.StartupPath, \"DataSettings.xml\");\r\n\r\n    private string resultConnection;\r\n\r\n    private static DataSettings settings;\r\n\r\n    private SQLValues sqlValues;\r\n\r\n    public static DataSettings Setup\r\n    {\r\n      get\r\n      {\r\n        try\r\n        {\r\n          if (settings == null)\r\n          {\r\n            if (File.Exists(FilePath))\r\n            {\r\n\r\n              XmlSerializer serializer = new XmlSerializer(typeof(DataSettings));\r\n\r\n              StreamReader reader = new StreamReader(FilePath);\r\n\r\n              try\r\n              {\r\n                object temp = serializer.Deserialize(reader);\r\n\r\n                settings = (DataSettings)temp;\r\n              }\r\n              catch\r\n              {\r\n                throw;\r\n              }\r\n              finally\r\n              {\r\n                reader.Close();\r\n\r\n                reader.Dispose();\r\n              }\r\n            }\r\n            else\r\n            {\r\n              settings = new DataSettings();\r\n            }\r\n          }\r\n        }\r\n        catch\r\n        {\r\n          throw;\r\n        }\r\n\r\n        return settings;\r\n      }\r\n    }\r\n\r\n    public string ConnectionString\r\n    {\r\n      get\r\n      {\r\n        if (!this.resultConnection.IsNullEmptyOrWhiteSpace())\r\n        {\r\n          return this.resultConnection;\r\n        }\r\n\r\n        string connectionString = \"Server={0};Database={1};User ID={2};Password={3};Trusted_Connection={4}\";\r\n\r\n        object[] args = new object[]\r\n        {\r\n          this.SQLValues.Server,\r\n          this.SQLValues.Database,\r\n          this.SQLValues.Username.ConvertStringToBytes().UnzipFile().ToString(),\r\n          this.SQLValues.Password.ConvertStringToBytes().UnzipFile().ToString(),\r\n          this.SQLValues.TrustedConnection\r\n        };\r\n\r\n        this.resultConnection = String.Format(connectionString, args);\r\n        \r\n        return this.resultConnection;\r\n      }\r\n    }\r\n\r\n    public SQLValues SQLValues\r\n    {\r\n      get\r\n      {\r\n        if (this.sqlValues == null)\r\n        {\r\n          return new SQLValues();\r\n        }\r\n\r\n        if (this.useCriptor)\r\n        {\r\n          return new SQLValues\r\n          {\r\n            Server = this.sqlValues.Server,\r\n            Database = this.sqlValues.Database,\r\n            Username= this.sqlValues.Username.ZipFile().ConvertBytesToString(),\r\n            Password = this.sqlValues.Password.ZipFile().ConvertBytesToString(),\r\n            TrustedConnection = this.sqlValues.TrustedConnection\r\n          };\r\n        }\r\n\r\n        return this.sqlValues;\r\n      }\r\n\r\n      set\r\n      {\r\n        this.sqlValues = value;\r\n\r\n        if (this.useCriptor)\r\n        {\r\n          this.sqlValues.Server = value.Server;\r\n\r\n          this.sqlValues.Database = value.Database;\r\n\r\n          this.sqlValues.Username = value.Username.ZipFile().ConvertBytesToString();\r\n\r\n          this.sqlValues.Password = value.Password.ZipFile().ConvertBytesToString();\r\n\r\n          this.sqlValues.TrustedConnection = value.TrustedConnection;\r\n        }\r\n      }\r\n    }\r\n    \r\n    public void Save()\r\n    {\r\n      this.useCriptor = true;\r\n\r\n      XmlSerializer serialize = new XmlSerializer(typeof(DataSettings));\r\n\r\n      StreamWriter writer = File.CreateText(DataSettings.FilePath);\r\n\r\n      try\r\n      {\r\n        serialize.Serialize(writer, this);\r\n      }\r\n      catch\r\n      {\r\n        throw;\r\n      }\r\n      finally\r\n      {\r\n        this.useCriptor = false;\r\n\r\n        writer.Close();\r\n\r\n        writer.Dispose();\r\n      }\r\n    }\r\n  }\r\n}\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Client Models Base","OutputFileName":"[[TableName]]Models_Base.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Client\\ViSo.ClientModels\\Base\\[[CanvasName]]","RepeatOption":1,"OverrideIfExists":true,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using System;\r\nusing WPF.Tools.BaseClasses;\r\n\r\nnamespace ViSo.SharedModels.DataModels.[[CanvasName]]\r\n{\r\n  public abstract class [[TableName]]Models_Base : ModelsBase\r\n  {\r\n[[1]]\r\n[[2]]\r\n  }\r\n}","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":1,"BuildTypeName":"Field Items","RepeatType":2,"Code":"      internal [[DataType]] _[[ColumnName]];\r\n","HasModelChanged":false,"Changes":{}},{"BuildTypeIndex":2,"BuildTypeName":"Properties","RepeatType":2,"Code":"    /// <summary>\r\n    /// <para>Name: [[ColumnFriendlyName]]</para>\r\n    /// <para>Description: [[ColumnDescription]]</para>\r\n    /// </summary> \r\n    public [[DataType]] [[ColumnName]]\r\n    { \r\n       get\r\n       {\r\n         return this._[[ColumnName]];\r\n       }\r\n\r\n       set\r\n       {\r\n          base.OnPropertyChanged(\"[[ColumnName]]\", ref this._[[ColumnName]], value);\r\n        }\r\n    }\r\n\r\n","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}},{"OptionModelName":"Client Models","OutputFileName":"[[TableName]]Models.cs","OutputDirectory":"C:\\AAA\\Hansie\\MyProjects\\ViSo-nice Client\\ViSo.ClientModels\\User\\[[CanvasName]]","RepeatOption":1,"OverrideIfExists":false,"LanguageOption":0,"BuildTypes":[{"BuildTypeIndex":0,"BuildTypeName":"Body","RepeatType":0,"Code":"using WPF.Tools.Attributes;\r\n\r\nnamespace ViSo.SharedModels.DataModels.[[CanvasName]]\r\n{\r\n  [ModelNameAttribute(\"TODO: Change My Name\")]\r\n  public class [[TableName]]Model : [[TableName]]Models_Base\r\n  {\r\n  }\r\n}","HasModelChanged":false,"Changes":{}}],"HasModelChanged":false,"Changes":{}}]}